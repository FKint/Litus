<?php

namespace CudiBundle\Repository\Sale;

use CommonBundle\Entity\User\Person,
    CommonBundle\Entity\General\AcademicYear,
    CudiBundle\Entity\Sale\Article as ArticleEntity,
    CudiBundle\Entity\Sale\Session as SessionEntity,
    Doctrine\ORM\EntityRepository,
    Doctrine\ORM\Query\Expr\Join,
    Doctrine\ORM\Query\Expr\OrderBy;

/**
 * SaleItem
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SaleItem extends EntityRepository
{
    public function findAll()
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->orderBy('i.timestamp', 'DESC')
            ->getQuery()
            ->getResult();

        return $resultSet;
    }

    public function findNumberBySession(SessionEntity $session)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('COUNT(i.id)')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->where(
                $query->expr()->eq('i.session', ':session')
            )
            ->setParameter('session', $session)
            ->getQuery()
            ->getSingleScalarResult();

        return $resultSet;
    }

    public function findAllPaginator($currentPage, $itemsPerPage, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->gt('s.openDate', ':start'),
                    $query->expr()->lt('s.openDate', ':end')
                )
            )
            ->setParameter('start', $academicYear->getUniversityStartDate())
            ->setParameter('end', $academicYear->getUniversityEndDate());

        return $this->_findAllPaginator($currentPage, $itemsPerPage, $query, new OrderBy('i.timestamp', 'DESC'));
    }

    private function _findAllPaginator($currentPage, $itemsPerPage, $basicQuery, $order)
    {
        $currentPage = $currentPage == 0 ? $currentPage = 1 : $currentPage;

        $query = clone $basicQuery;
        $resultSet = $query->select('i')
            ->setMaxResults($itemsPerPage)
            ->setFirstResult(($currentPage - 1) * $itemsPerPage)
            ->orderBy($order)
            ->getQuery()
            ->getResult();

        $query = clone $basicQuery;
        $totalNumber = $query->select('COUNT(i.id)')
            ->getQuery()
            ->getSingleScalarResult();

        return array($resultSet, $totalNumber);
    }

    public function findAllByArticlePaginator($article, $currentPage, $itemsPerPage, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.article', 'a')
            ->innerJoin('a.mainArticle', 'm')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->like($query->expr()->lower('m.title'), ':article'),
                    $query->expr()->andX(
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
            )
            ->setParameter('article', '%'.strtolower($article).'%')
            ->setParameter('start', $academicYear->getUniversityStartDate())
            ->setParameter('end', $academicYear->getUniversityEndDate());

        return $this->_findAllPaginator(
            $currentPage,
            $itemsPerPage,
            $query,
            new OrderBy('i.timestamp', 'DESC')
        );
    }

    public function findAllByPersonPaginator($name, $currentPage, $itemsPerPage, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.queueItem', 'q')
            ->innerJoin('q.person', 'p')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->orX(
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.firstName', "' '")),
                                $query->expr()->lower('p.lastName')
                            ),
                            ':name'
                        ),
                        $query->expr()->like(
                            $query->expr()->concat(
                                $query->expr()->lower($query->expr()->concat('p.lastName', "' '")),
                                $query->expr()->lower('p.firstName')
                            ),
                            ':name'
                        )
                    ),
                    $query->expr()->andX(
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
            )
            ->setParameter('name', '%'.strtolower($name).'%')
            ->setParameter('start', $academicYear->getUniversityStartDate())
            ->setParameter('end', $academicYear->getUniversityEndDate());

        return $this->_findAllPaginator(
            $currentPage,
            $itemsPerPage,
            $query,
            new OrderBy('i.timestamp', 'DESC')
        );
    }

    public function findAllByOrganizationPaginator($organization, $currentPage, $itemsPerPage, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $resultSet = $query->select('p.id')
            ->from('CommonBundle\Entity\User\Person\Organization\AcademicYearMap', 'm')
            ->innerJoin('m.academic', 'p')
            ->innerJoin('m.organization', 'o')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('m.academicYear', ':academicYear'),
                    $query->expr()->like($query->expr()->lower('o.name'), ':organization')
                )
            )
            ->setParameter('academicYear', $academicYear)
            ->setParameter('organization', '%'.strtolower($organization).'%')
            ->getQuery()
            ->getResult();

        $ids = array(0);
        foreach($resultSet as $item) {
            $ids[] = $item['id'];
        }

        $query = $this->getEntityManager()->createQueryBuilder();
        $query->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.queueItem', 'q')
            ->where(
                $query->expr()->in('q.person', $ids)
            );

        return $this->_findAllPaginator(
            $currentPage,
            $itemsPerPage,
            $query,
            new OrderBy('i.timestamp', 'DESC')
        );
    }

    public function findAllByDiscountPaginator($discount, $currentPage, $itemsPerPage, AcademicYear $academicYear)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.session', 's')
            ->where(
                $query->expr()->andX(
                    $query->expr()->like($query->expr()->lower('i.discountType'), ':discount'),
                    $query->expr()->andX(
                        $query->expr()->gt('s.openDate', ':start'),
                        $query->expr()->lt('s.openDate', ':end')
                    )
                )
            )
            ->setParameter('discount', '%'.strtolower($discount).'%')
            ->setParameter('start', $academicYear->getUniversityStartDate())
            ->setParameter('end', $academicYear->getUniversityEndDate());

        return $this->_findAllPaginator(
            $currentPage,
            $itemsPerPage,
            $query,
            new OrderBy('i.timestamp', 'DESC')
        );
    }

    public function findAllBySessionPaginator(SessionEntity $session, $currentPage, $itemsPerPage)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->where(
                $query->expr()->eq('i.session', ':session')
            )
            ->setParameter('session', $session);

        return $this->_findAllPaginator($currentPage, $itemsPerPage, $query, new OrderBy('i.timestamp', 'DESC'));
    }

    public function findOneByPersonAndArticle(Person $person, ArticleEntity $article)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.queueItem', 'q')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('q.person', ':person'),
                    $query->expr()->eq('i.article', ':article')
                )
            )
            ->setParameter('person', $person->getId())
            ->setParameter('article', $article->getId())
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }

    public function findOneByArticleAndPersonAndDiscountType(ArticleEntity $article, Person $person, $discountType)
    {
        $query = $this->_em->createQueryBuilder();
        $resultSet = $query->select('i')
            ->from('CudiBundle\Entity\Sale\SaleItem', 'i')
            ->innerJoin('i.queueItem', 'q')
            ->where(
                $query->expr()->andX(
                    $query->expr()->eq('q.person', ':person'),
                    $query->expr()->eq('i.article', ':article'),
                    $query->expr()->eq('i.discountType', ':discountType')
                )
            )
            ->setParameter('person', $person->getId())
            ->setParameter('article', $article->getId())
            ->setParameter('discountType', $discountType)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        if (isset($resultSet[0]))
            return $resultSet[0];

        return null;
    }
}
